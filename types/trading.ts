import { Decimal } from 'decimal.js'
import { StrategyMetrics } from './dashboard'
/**
 * Market data structure for OHLCV data
 */
export interface MarketData {
  symbol: string
  timestamp: Date
  timeframe: string
  open: number
  high: number
  low: number
  close: number
  volume: number
  
  // Technical indicators (optional)
  rsi?: number
  sma20?: number
  sma50?: number
  sma200?: number
  ema12?: number
  ema26?: number
  macd?: number
  macdSignal?: number
  macdHistogram?: number
  bollingerUpper?: number
  bollingerLower?: number
  bollingerMiddle?: number
  stochasticK?: number
  stochasticD?: number
  williamsR?: number
  cci?: number
  atr?: number
  
  // Additional metadata
  source?: string
  quality?: 'HIGH' | 'MEDIUM' | 'LOW'
}

/**
 * Real-time quote data
 */
export interface Quote {
  symbol: string
  bid: number
  ask: number
  last: number
  volume: number
  timestamp: Date
  exchange?: string
  spread?: number
}

/**
 * Trading signal generated by strategies
 */
export interface TradeSignal {
  riskScore: number
  action: 'BUY' | 'SELL' | 'HOLD'
  confidence: number // 0-1
  reason: string
  timestamp?: Date
  
  // Risk management
  stopLoss?: number
  takeProfit?: number
  suggestedQuantity?: number
  maxRisk?: number
  
  // Signal metadata
  strategy?: string
  timeframe?: string
  indicators?: Record<string, number>
  
  // Validation
  isValid?: boolean
  validationErrors?: string[]
}

/**
 * Trade order structure
 */
export interface TradeOrder {
  symbol: string
  side: 'BUY' | 'SELL'
  quantity: number
  orderType: 'MARKET' | 'LIMIT' | 'STOP' | 'STOP_LIMIT'
  price?: number
  stopPrice?: number
  timeInForce?: 'DAY' | 'GTC' | 'IOC' | 'FOK'
  
  // Order metadata
  clientOrderId?: string
  source?: string
  strategy?: string
  notes?: string
}

/**
 * Trade execution result
 */
export interface TradeResult {
  orderId: string
  clientOrderId?: string
  symbol: string
  side: 'BUY' | 'SELL'
  quantity: number
  filledQuantity: number
  avgFillPrice: number
  status: 'FILLED' | 'PARTIALLY_FILLED' | 'CANCELED' | 'REJECTED' | 'PENDING'
  fees: number
  timestamp: Date
  
  // Execution details
  exchange?: string
  executionId?: string
  leaves?: number // Remaining quantity
  cumQty?: number // Cumulative quantity
  
  // Error information
  rejectReason?: string
  errorCode?: string
}

/**
 * Position information
 */
export interface Position {
  symbol: string
  quantity: number
  side: 'LONG' | 'SHORT'
  avgPrice: number
  currentPrice: number
  marketValue: number
  
  // P&L information
  unrealizedPnL: number
  realizedPnL: number
  totalPnL: number
  percentChange: number
  
  // Position metadata
  openDate: Date
  lastUpdate: Date
  exchange?: string
  strategy?: string
}

/**
 * Portfolio structure
 */
export interface Portfolio {
  totalValue: number
  cashBalance: number
  equity: number
  
  // P&L information
  totalPnL: number
  dayPnL: number
  unrealizedPnL: number
  realizedPnL: number
  
  // Portfolio metrics
  totalReturn: number
  dayReturn: number
  maxDrawdown: number
  sharpeRatio?: number
  
  // Holdings
  positions: Position[]
  allocation: { [symbol: string]: number }
  
  // Metadata
  lastUpdate: Date
  currency: string
  riskLevel?: 'LOW' | 'MEDIUM' | 'HIGH'
}

// ============================================================================
// Strategy Types
// ============================================================================

/**
 * Base trading strategy interface
 */
export interface TradingStrategy {
  name: string
  type: string
  description: string
  timeframe: string
  parameters: Record<string, any>
  
  // Core methods
  analyze(data: MarketData[]): Promise<TradeSignal>
  backtest(historicalData: MarketData[]): Promise<BacktestResult>
  validateParameters(params: Record<string, any>): boolean
  
  // Optional methods
  initialize?(): Promise<void>
  cleanup?(): Promise<void>
  updateParameters?(params: Record<string, any>): void
}

/**
 * Strategy performance metrics
 */
export interface StrategyPerformance {
  strategyId: string
  name: string
  
  // Performance metrics
  totalTrades: number
  winningTrades: number
  losingTrades: number
  winRate: number
  
  // Returns
  totalReturn: number
  avgReturn: number
  bestTrade: number
  worstTrade: number
  
  // Risk metrics
  maxDrawdown: number
  sharpeRatio: number
  sortinoRatio: number
  calmarRatio: number
  volatility: number
  
  // Additional metrics
  profitFactor: number
  avgWinningTrade: number
  avgLosingTrade: number
  avgHoldingPeriod: number
  
  // Time-based metrics
  monthlyReturns: number[]
  yearlyReturns: number[]
  
  // Metadata
  startDate: Date
  endDate: Date
  lastUpdate: Date
}

/**
 * Backtesting configuration
 */
export interface BacktestConfig {
  startDate: Date
  endDate: Date
  initialCapital: number
  commission: number
  slippage: number
  
  // Risk management
  maxPositionSize: number
  maxDrawdownLimit: number
  riskFreeRate: number
  
  // Execution settings
  fillModel: 'CLOSE' | 'OPEN' | 'REALISTIC'
  latency: number // Execution delay in ms
  
  // Data settings
  dataFrequency: string
  benchmarkSymbol?: string
}

/**
 * Backtesting result
 */
export interface BacktestResult {
  startDate: Date
  endDate: Date
  
  // Trade statistics
  totalTrades: number
  winningTrades: number
  losingTrades: number
  winRate: number
  
  // Returns
  totalReturn: number
  annualizedReturn: number
  maxDrawdown: number
  
  // Risk metrics
  sharpeRatio: number
  sortinoRatio: number
  calmarRatio: number
  volatility: number
  
  // Additional metrics
  profitFactor: number
  avgTrade: number
  avgWinningTrade: number
  avgLosingTrade: number
  
  // Trade details
  trades: BacktestTrade[]
  
  // Equity curve
  equityCurve: EquityPoint[]
  
  // Benchmark comparison
  benchmarkReturn?: number
  alpha?: number
  beta?: number
}

/**
 * Individual backtest trade
 */
export interface BacktestTrade {
  entryDate: Date
  exitDate: Date
  symbol: string
  side: 'BUY' | 'SELL'
  entryPrice: number
  exitPrice: number
  quantity: number
  pnl: number
  percentReturn: number
  holdingPeriod: number // in days
  commission: number
  slippage: number
  
  // Trade metadata
  strategy?: string
  signal?: TradeSignal
  exitReason?: string
}

/**
 * Equity curve point
 */
export interface EquityPoint {
  date: Date
  equity: number
  drawdown: number
  benchmark?: number
}

// ============================================================================
// Exchange and Data Provider Types
// ============================================================================

/**
 * Exchange adapter interface
 */
export interface ExchangeAdapter {
  name: string
  type: 'STOCK' | 'CRYPTO' | 'FOREX' | 'FUTURES'
  
  // Market data methods
  getMarketData(symbol: string, timeframe?: string, limit?: number): Promise<MarketData[]>
  getQuote(symbol: string): Promise<Quote>
  getSymbols(): Promise<string[]>
  
  // Trading methods
  executeTrade(order: TradeOrder): Promise<TradeResult>
  getPositions(): Promise<Position[]>
  getBalance(): Promise<Balance[]>
  getOrders(status?: string): Promise<Order[]>
  cancelOrder(orderId: string): Promise<boolean>
  
  // Account information
  getAccount(): Promise<Account>
  
  // WebSocket methods
  subscribeToMarketData(symbols: string[], callback: (data: MarketData) => void): void
  subscribeToTrades(callback: (trade: TradeResult) => void): void
  unsubscribeFromMarketData(symbols: string[]): void
  
  // Connection management
  connect(): Promise<void>
  disconnect(): Promise<void>
  isConnected(): boolean
}

/**
 * Account information
 */
export interface Account {
  accountId: string
  accountType: 'PAPER' | 'LIVE'
  currency: string
  
  // Balances
  totalValue: number
  cashBalance: number
  equity: number
  buyingPower: number
  
  // P&L
  dayPnL: number
  totalPnL: number
  
  // Risk information
  marginUsed: number
  marginAvailable: number
  riskLevel: number
  
  // Metadata
  lastUpdate: Date
  status: 'ACTIVE' | 'SUSPENDED' | 'CLOSED'
}

/**
 * Balance information
 */
export interface Balance {
  currency: string
  available: number
  total: number
  locked: number
}

/**
 * Order information
 */
export interface Order {
  orderId: string
  clientOrderId?: string
  symbol: string
  side: 'BUY' | 'SELL'
  quantity: number
  price?: number
  stopPrice?: number
  orderType: 'MARKET' | 'LIMIT' | 'STOP' | 'STOP_LIMIT'
  timeInForce: 'DAY' | 'GTC' | 'IOC' | 'FOK'
  status: 'PENDING' | 'OPEN' | 'FILLED' | 'PARTIALLY_FILLED' | 'CANCELED' | 'REJECTED'
  
  // Execution information
  filledQuantity: number
  avgFillPrice: number
  lastFillPrice?: number
  lastFillQuantity?: number
  
  // Timestamps
  createdAt: Date
  updatedAt: Date
  expiredAt?: Date
  
  // Fees and costs
  commission: number
  fees: Record<string, number>
}

// ============================================================================
// Risk Management Types
// ============================================================================

/**
 * Risk manager interface
 */
export interface RiskManager {
  // Position sizing
  maxPositionSize: number // Percentage of portfolio
  maxPortfolioRisk: number // Maximum portfolio risk
  maxDailyLoss: number // Maximum daily loss limit
  maxOpenPositions: number
  
  // Symbol restrictions
  allowedSymbols: string[]
  blockedSymbols: string[]
  
  // Risk validation
  validateTrade(trade: TradeOrder, portfolio: Portfolio): Promise<RiskValidationResult>
  calculatePositionSize(signal: TradeSignal, portfolio: Portfolio): number
  checkRiskLimits(portfolio: Portfolio): RiskCheckResult
  
  // Risk monitoring
  getPortfolioRisk(portfolio: Portfolio): PortfolioRisk
  getPositionRisk(position: Position): PositionRisk
}

/**
 * Risk validation result
 */
export interface RiskValidationResult {
  isValid: boolean
  riskScore: number
  warnings: string[]
  errors: string[]
  suggestedQuantity?: number
  maxAllowedQuantity?: number
}

/**
 * Risk check result
 */
export interface RiskCheckResult {
  isWithinLimits: boolean
  violations: RiskViolation[]
  recommendations: string[]
  riskScore: number
}

/**
 * Risk violation
 */
export interface RiskViolation {
  type: 'POSITION_SIZE' | 'DAILY_LOSS' | 'DRAWDOWN' | 'CORRELATION' | 'CONCENTRATION'
  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL'
  description: string
  currentValue: number
  limitValue: number
  action: 'WARNING' | 'REDUCE_POSITION' | 'CLOSE_POSITION' | 'STOP_TRADING'
}

/**
 * Portfolio risk metrics
 */
export interface PortfolioRisk {
  totalRisk: number
  var95: number // Value at Risk 95%
  var99: number // Value at Risk 99%
  expectedShortfall: number
  maxDrawdown: number
  sharpeRatio: number
  beta: number
  
  // Concentration risk
  concentrationRisk: number
  largestPosition: number
  
  // Correlation risk
  averageCorrelation: number
  maxCorrelation: number
  
  // Sector/Asset allocation
  sectorExposure: Record<string, number>
  assetAllocation: Record<string, number>
}

/**
 * Position risk metrics
 */
export interface PositionRisk {
  symbol: string
  positionRisk: number
  var95: number
  volatility: number
  beta: number
  correlation: number
  
  // Position specific metrics
  portfolioWeight: number
  riskContribution: number
  marginUsed: number
  
  // Risk limits
  positionLimit: number
  riskLimit: number
  isOverLimit: boolean
}

// ============================================================================
// Paper Trading Types
// ============================================================================

/**
 * Paper trading engine interface
 */
export interface PaperTradingEngine {
  balance: number
  positions: Map<string, Position>
  orders: Order[]
  
  // Trading methods
  executeTrade(order: TradeOrder): Promise<TradeResult>
  getPortfolio(): Promise<Portfolio>
  getMarketPrice(symbol: string): Promise<number>
  
  // Simulation settings
  simulateSlippage(price: number, quantity: number, side: string): number
  calculateFees(trade: TradeOrder): number
  
  // Account management
  reset(initialBalance?: number): void
  getTradeHistory(): TradeResult[]
  getPerformanceMetrics(): PerformanceMetrics
}

/**
 * Performance metrics
 */
export interface PerformanceMetrics {
  totalReturn: number
  annualizedReturn: number
  volatility: number
  sharpeRatio: number
  maxDrawdown: number
  winRate: number
  profitFactor: number
  
  // Trade statistics
  totalTrades: number
  avgTrade: number
  avgWinningTrade: number
  avgLosingTrade: number
  
  // Time-based metrics
  dailyReturns: number[]
  monthlyReturns: number[]
  
  // Risk metrics
  var95: number
  expectedShortfall: number
  downside_deviation: number
}

// ============================================================================
// Ensemble and Strategy Management Types
// ============================================================================

/**
 * Ensemble strategy result
 */
export interface EnsembleResult {
  signal: TradeSignal
  consensus: number // Agreement level between strategies
  individualSignals: { [strategyId: string]: TradeSignal }
  
  // Confidence metrics
  weightedConfidence: number
  majorityAction: 'BUY' | 'SELL' | 'HOLD'
  
  // Risk assessment
  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH'
  riskFactors: string[]
  
  // Strategy weights
  strategyWeights: { [strategyId: string]: number }
}

/**
 * Strategy configuration
 */
export interface StrategyConfig {
  id: string
  name: string
  type: string
}


export interface EnhancedStrategyMetrics extends StrategyMetrics {
  winRate: any
  sharpeRatio: number
  maxDrawdown: number
  volatility: number
  consistency: number
  riskScore: number
}

export interface StrategyRecommendation {
  type: 'IMPROVE' | 'OPTIMIZE' | 'CAUTION' | 'MAINTAIN'
  title: string
  description: string
  actionItems: string[]
  impact: 'HIGH' | 'MEDIUM' | 'LOW'
  timeframe: string
}

export interface TopStrategyAnalysis {
  strategyId: string
  name: string
  score: number
  metrics: EnhancedStrategyMetrics
  signal: TradeSignal
  strengths: string[]
  improvements: string[]
  recommendations: StrategyRecommendation[]
}
